# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AlgoMapsPlugin
                                 A QGIS plugin
 Plugin Algolytics do standaryzacji danych adresowych i geokodowania
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-09-05
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Algolytics Technologies
        email                : info@algolytics.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import requests
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QTableWidgetItem, QComboBox

from qgis.core import (
    Qgis,
    QgsMessageLog,
    QgsProject,
    QgsRectangle, QgsPointXY, QgsCoordinateReferenceSystem, QgsCoordinateTransform,
    QgsField, QgsFeature, QgsVectorLayer,
    QgsGeometry
)

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .algomaps_qgis_dockwidget import AlgoMapsPluginDockWidget
import os.path

import json

CONFIG_PATH = 'dq_config.json'
DEBUG_MODE = True  # Verbose messages


class AlgoMapsPlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.include_gus = None
        self.include_teryt = None
        self.include_buildinfo = None
        self.include_financial = None
        self.iface = iface
        self.canvas = self.iface.mapCanvas()
        self.batch_combo_widgets = []  # List of column-role comboBoxes for Batch processing

        # Initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        self.config_path = os.path.join(self.plugin_dir, CONFIG_PATH)

        # Initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AlgoMapsPlugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&AlgoMaps')
        
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'AlgoMapsPlugin')
        self.toolbar.setObjectName(u'AlgoMapsPlugin')

        self.pluginIsActive = False
        self.dockwidget = None
        self.qproj = None

        if Qgis.versionInt() > 33800:
            from qgis.PyQt.QtCore import QMetaType
            self._field_string_type = QMetaType.QString
            self._field_int_type = QMetaType.Int
            self._field_double_type = QMetaType.Double
        else:
            from qgis.PyQt.QtCore import QVariant
            self._field_string_type = QVariant.String
            self._field_int_type = QVariant.Int
            self._field_double_type = QVariant.Double

        # Read config file
        try:

            with open(self.config_path) as f:
                conf = json.load(f)

            self.dq_user = conf.get("dq_user")
            self.dq_token = conf.get("dq_token")
            self.api_key = conf.get("api_key")

            self.default_chk_teryt = conf.get("default_chk_teryt")
            self.default_chk_gus = conf.get("default_chk_gus")
            self.default_chk_buildinfo = conf.get("default_chk_buildinfo")
            self.default_chk_financial = conf.get("default_chk_financial")

        except Exception as e:
            iface.messageBar().pushMessage(self.tr(u'AlgoMaps'),
                                           self.tr(u'Cannot read config file, check details in "Log Messages" tab.'),
                                           level=Qgis.MessageLevel.Critical)
            QgsMessageLog.logMessage(repr(e), tag='AlgoMaps', level=Qgis.MessageLevel.Critical)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AlgoMapsPlugin', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/algomaps_qgis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'AlgoMaps - standaryzacja i geokodowanie adres√≥w'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.qproj = QgsProject.instance()

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&AlgoMaps'),
                action)
            self.iface.removeToolBarIcon(action)
        # Remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget is None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = AlgoMapsPluginDockWidget()

                # Fill the `config.json` values into UI
                self.populate_dq_api_settings_ui()

                # Set default checkboxes values
                self.populate_checkbox_settings_ui()

                # Connect the buttons
                self.dockwidget.btn_settings_save.clicked.connect(self.save_settings)
                self.dockwidget.btn_settings_reset.clicked.connect(self.reset_settings)

                self.dockwidget.btn_geocode_general.clicked.connect(self.clicked_geocode_general)
                self.dockwidget.btn_geocode_details.clicked.connect(self.clicked_geocode_details)
                
                # Conenct settings checkboxes
                self.dockwidget.chk_teryt.stateChanged.connect(self.settings_chkbox_changed)
                self.dockwidget.chk_gus.stateChanged.connect(self.settings_chkbox_changed)
                self.dockwidget.chk_buildinfo.stateChanged.connect(self.settings_chkbox_changed)
                self.dockwidget.chk_financial.stateChanged.connect(self.settings_chkbox_changed)

                #
                self.dockwidget.progress_batch.setVisible(False)
                self.dockwidget.tableWidget_batch.setVisible(False)
                self.dockwidget.lbl_records.setVisible(False)
                self.dockwidget.group_batch.setVisible(False)
                self.dockwidget.file_batch_load.fileChanged.connect(self.file_batch_load_changed)

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

    def populate_dq_api_settings_ui(self):
        self.dockwidget.txt_dq_user.setText(self.dq_user)
        self.dockwidget.txt_dq_token.setText(self.dq_token)
        self.dockwidget.txt_api_key.setText(self.api_key)

    def populate_checkbox_settings_ui(self):
        self.dockwidget.chk_financial.setChecked(self.default_chk_financial)
        self.dockwidget.chk_teryt.setChecked(self.default_chk_teryt)
        self.dockwidget.chk_gus.setChecked(self.default_chk_gus)
        self.dockwidget.chk_buildinfo.setChecked(self.default_chk_buildinfo)
        if self.dockwidget.chk_financial.isChecked():
            self.dockwidget.chk_gus.setEnabled(False)

    def reset_settings(self):
        # Set previous DQ/API data
        self.populate_dq_api_settings_ui()

        # Set default checkbox values
        self.populate_checkbox_settings_ui()

        if DEBUG_MODE:
            QgsMessageLog.logMessage("Reset ustawie≈Ñ.", tag='AlgoMaps', level=Qgis.MessageLevel.Info)

    def save_settings(self):
        try:
            new_settings = {
                # Save new DQ/API data
                "dq_user": self.dockwidget.txt_dq_user.text(),
                "dq_token": self.dockwidget.txt_dq_token.text(),
                "api_key": self.dockwidget.txt_api_key.text(),
                # Save the checkbox values
                "default_chk_teryt": self.dockwidget.chk_teryt.isChecked(),
                "default_chk_gus": self.dockwidget.chk_gus.isChecked(),
                "default_chk_buildinfo": self.dockwidget.chk_buildinfo.isChecked(),
                "default_chk_financial": self.dockwidget.chk_financial.isChecked(),
            }

            with open(self.config_path, 'w') as f:
                json.dump(new_settings, f)

            self.dq_user = new_settings['dq_user']
            self.dq_token = new_settings['dq_token']
            self.api_key = new_settings['api_key']

            self.default_chk_teryt = new_settings["default_chk_teryt"]
            self.default_chk_gus = new_settings["default_chk_gus"]
            self.default_chk_buildinfo = new_settings["default_chk_buildinfo"]
            self.default_chk_financial = new_settings["default_chk_financial"]

            if DEBUG_MODE:
                QgsMessageLog.logMessage("Zapisano ustawienia", tag='AlgoMaps', level=Qgis.MessageLevel.Success)

        except:
            self.iface.messageBar().pushMessage(self.tr(u'AlgoMaps'),
                                                self.tr(u'Zapis ustawie≈Ñ nie powi√≥d≈Ç siƒô'),
                                                level=Qgis.MessageLevel.Warning)

    def clicked_geocode_general(self):
        if DEBUG_MODE:
            QgsMessageLog.logMessage("Geokoduj (jedno pole adresowe)", tag='AlgoMaps', level=Qgis.MessageLevel.Info)

        dane_ogolne = self.dockwidget.txt_generaldata.text()

        # API request
        req_data = {
            "generalData": dane_ogolne
        }
        result_json = self.send_single_algomaps_request(req_data,
                                                        self.include_teryt,
                                                        self.include_gus,
                                                        self.include_buildinfo,
                                                        self.include_financial)
        if result_json is None:
            return

        self.dockwidget.txt_outputstand.setText(json.dumps(result_json, indent=2, ensure_ascii=False).encode('utf8').decode())

        if 'latitude' in result_json and 'longitude' in result_json:
            self.add_response_to_map(result_json, dane_ogolne, self.include_teryt,
                                     self.include_gus, self.include_buildinfo, self.include_financial)
        else:
            self.iface.messageBar().pushMessage(self.tr(u'AlgoMaps'),
                                                self.tr(u'Brak geokodowania dla podanego adresu'),
                                                level=Qgis.MessageLevel.Warning)

    def clicked_geocode_details(self):
        if DEBUG_MODE:
            QgsMessageLog.logMessage("Geokoduj (dane szczeg√≥≈Çowe)", tag='AlgoMaps', level=Qgis.MessageLevel.Info)

        w = self.dockwidget.txt_voivodeship.text()
        p = self.dockwidget.txt_county.text()
        g = self.dockwidget.txt_commune.text()
        m = self.dockwidget.txt_city.text()
        k = self.dockwidget.txt_postal.text()
        u = self.dockwidget.txt_street.text()
        n = self.dockwidget.txt_houseno.text()
        l = self.dockwidget.txt_flatno.text()

        # API request
        req_data = {
            "voivodeshipName": w,
            "countyName": p,
            "communeName": g,
            "cityName": m,
            "postalCode": k,
            "streetName": u,
            "streetNumber": n,
            "apartmentNumber": l
        }

        result_json = self.send_single_algomaps_request(req_data,
                                                        self.include_teryt,
                                                        self.include_gus,
                                                        self.include_buildinfo,
                                                        self.include_financial)
        
        if result_json is None:  # Error
            return

        self.dockwidget.txt_outputstand.setText(json.dumps(result_json, indent=2, ensure_ascii=False).encode('utf8').decode())

        if 'latitude' in result_json and 'longitude' in result_json:
            input_text = f'{w}|{p}|{g}|{m}|{k}|{u}|{n}|{l}'
            self.add_response_to_map(result_json, input_text, self.include_teryt,
                                     self.include_gus, self.include_buildinfo, self.include_financial)
        else:
            self.iface.messageBar().pushMessage(self.tr(u'AlgoMaps'),
                                                self.tr(u'Brak geokodowania dla podanego adresu'),
                                                level=Qgis.MessageLevel.Warning)
    
    def send_single_algomaps_request(self, req_data, teryt=False, gus=False, buildinfo=False, financial=False):
        active_modules = ["ADDRESSES"] if not financial else ["ADDRESSES", "FINANCES"]
        gus = gus if not financial else True  # If using financial data, we need GUS identifiers
        input_json = {
            "inputRows": [req_data],
            "processParameters": {
                "activeModules": active_modules,
                "includeBuildingsInfo": buildinfo,
                "includeSymbolicNames": teryt,
                "includeDiagnosticInfo": True,
                "includeGeographicCoordinates": True,
                "includeGusZones": gus
            }
        }
        if DEBUG_MODE:
            QgsMessageLog.logMessage('SEND: ' + repr(input_json), tag='AlgoMaps', level=Qgis.MessageLevel.Info)

        headers = {
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache',
            'Ocp-Apim-Subscription-Key': self.api_key
        }

        response = requests.post('https://api.algolytics.pl/dqo/api/v1/rows',
                                 json=input_json,
                                 headers=headers)
        if response.status_code == 200:
            return response.json()[0]
        else:
            self.iface.messageBar().pushMessage(self.tr(u'AlgoMaps'),
                                                self.tr(u'Could not fetch the data from server, check the settings'),
                                                level=Qgis.MessageLevel.Critical)
            return None

    def add_response_to_map(self, result_json, input_data=None, teryt=False, gus=False, buildinfo=False, financial=False):
        default_fields_names = ["voivodeshipName", "countyName", "communeName", "postalCode",
                                "cityName", "cityDistrictName", "streetAttribute", "streetName",
                                "streetNameMajorPart", "streetNameMinorPart", "streetNumber", "apartmentNumber",
                                "addressId", "numberOfApartments", "numberOfJuridicalPersons",
                                "latitude", "longitude"]

        default_fields = []

        for field in default_fields_names:
            if field in ["latitude", "longitude"]:
                field_type = self._field_double_type
            elif field in ["numberOfApartments", "numberOfJuridicalPersons"]:
                field_type = self._field_int_type
            else:
                field_type = self._field_string_type
            default_fields.append(self._define_field(field, field_type, result_json))

        lat = result_json.get('latitude')
        lon = result_json.get('longitude')
        status = result_json.get('statuses')

        status_match, status_geocode, status_other = self._parse_statuses(status)

        default_definitions = [QgsField(x[0], x[1]) for x in default_fields]
        default_values = [x[2] for x in default_fields]  # Values of fields in order

        # Additional fields (checkboxes selected)
        additional_fields = []

        if teryt:
            additional_fields.append(self._define_field("communeSymbol", self._field_string_type, result_json))
            additional_fields.append(self._define_field("communeTypeSymbol", self._field_int_type, result_json))
            additional_fields.append(self._define_field("communeTypeName", self._field_string_type, result_json))
            additional_fields.append(self._define_field("citySymbol", self._field_string_type, result_json))
            additional_fields.append(self._define_field("cityDistrictSymbol", self._field_string_type, result_json))
            additional_fields.append(self._define_field("streetSymbol", self._field_string_type, result_json))

        if gus:
            additional_fields.append(self._define_field("statisticalRegionSymbol", self._field_string_type, result_json))
            additional_fields.append(self._define_field("censusCircuitSymbol", self._field_string_type, result_json))

        if buildinfo:
            # Integer fields
            for field in ["numberOfInhabitedApartmentsByGUS", "numberOfInhabitedApartmentsByPESEL",
                          "numberOfInhabitantsByGUS", "numberOfInhabitantsByPESEL",
                          "numberOfMen",
                          "numberOfMenBetween_0_4_yearsOld", "numberOfMenBetween_5_9_yearsOld",
                          "numberOfMenBetween_10_14_yearsOld", "numberOfMenBetween_15_19_yearsOld",
                          "numberOfMenBetween_20_24_yearsOld", "numberOfMenBetween_25_29_yearsOld",
                          "numberOfMenBetween_30_34_yearsOld", "numberOfMenBetween_35_39_yearsOld",
                          "numberOfMenBetween_40_44_yearsOld", "numberOfMenBetween_45_49_yearsOld",
                          "numberOfMenBetween_50_54_yearsOld", "numberOfMenBetween_55_59_yearsOld",
                          "numberOfMenBetween_60_64_yearsOld", "numberOfMenOver_65_yearsOld",
                          "numberOfWomen",
                          "numberOfWomenBetween_0_4_yearsOld", "numberOfWomenBetween_5_9_yearsOld",
                          "numberOfWomenBetween_10_14_yearsOld", "numberOfWomenBetween_15_19_yearsOld",
                          "numberOfWomenBetween_20_24_yearsOld", "numberOfWomenBetween_25_29_yearsOld",
                          "numberOfWomenBetween_30_34_yearsOld", "numberOfWomenBetween_35_39_yearsOld",
                          "numberOfWomenBetween_40_44_yearsOld", "numberOfWomenBetween_45_49_yearsOld",
                          "numberOfWomenBetween_50_54_yearsOld", "numberOfWomenBetween_55_59_yearsOld",
                          "numberOfWomenBetween_60_64_yearsOld", "numberOfWomenOver_65_yearsOld",
                          "numberOfMicroEntrepreneurs"]:
                additional_fields.append(self._define_field(field, self._field_int_type, result_json))
            # String field
            additional_fields.append(self._define_field("taxationAuthority", self._field_string_type, result_json))

        if financial:
            # Double precision fields
            for field in ["individualClientFraudStatistic", "individualClientFraudScore",
                          "individualClientDefaultStatistic", "individualClientDefaultScore",
                          "businessClientFraudStatistic", "businessClientFraudScore",
                          "businessClientDefaultStatistic", "businessClientDefaultScore",
                          "entrepreneurFraudStatistic", "entrepreneurFraudScore",
                          "entrepreneurDefaultStatistic", "entrepreneurDefaultScore",
                          "averageIncome", "incomePercentile5", "incomePercentile25", "incomePercentile50",
                          "incomePercentile75", "incomePercentile95"]:
                additional_fields.append(self._define_field(field, self._field_double_type, result_json))

        additional_values = [x[2] for x in additional_fields]  # Values of additional fields in order
        additional_definitions = [QgsField(x[0], x[1]) for x in additional_fields]  # Field definitions for data provider

        # Add to map
        layer_name = "AlgoMaps standaryzacja i geokodowanie"
        layer_find = QgsProject.instance().mapLayersByName(layer_name)
        if len(layer_find) == 0:
            # Create layer if not exists
            vl = QgsVectorLayer("Point?crs=epsg:4326", layer_name, "memory")
            self.qproj.addMapLayer(vl)

            pr = vl.dataProvider()

            pr.addAttributes([QgsField("inputData", self._field_string_type),
                              *default_definitions,
                              QgsField("statusMatch", self._field_string_type),
                              QgsField("statusGeocoding", self._field_string_type),
                              QgsField("statusOther", self._field_string_type),
                              *additional_definitions])
        else:
            vl = layer_find[0]
            pr = vl.dataProvider()

        # Create feature
        f = QgsFeature()
        f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(lon, lat)))
        f.setAttributes([input_data,
                         *default_values,
                         status_match,
                         status_geocode,
                         status_other,
                         *additional_values])
        pr.addFeature(f)
        vl.updateFields()
        vl.updateExtents()

        # Recenter the map
        self.recenter_at_xy(lon, lat)

    def _define_field(self, field_name, field_type, result_json):
        if field_type == 'str' or field_type == 'string':
            field_type = self._field_string_type
        if field_type == 'int':
            field_type = self._field_int_type
        if field_type == 'double' or field_type == 'float':
            field_type = self._field_double_type
        return [field_name, field_type, result_json.get(field_name)]

    def recenter_at_xy(self, lon, lat, srs=4326):
        original_rect = QgsRectangle(QgsPointXY(lon, lat), QgsPointXY(lon, lat))

        # We need to transform the point lat/lon to map's CRS
        source_crs = QgsCoordinateReferenceSystem(f"EPSG:{srs}")
        dest_crs = self.qproj.crs()

        transform_context = QgsProject.instance().transformContext()
        coordinate_transform = QgsCoordinateTransform(source_crs, dest_crs, transform_context)
        transformed_rect = coordinate_transform.transformBoundingBox(original_rect)

        # Center map at the point
        self.canvas.setExtent(transformed_rect)
        self.canvas.refresh()
        
    def settings_chkbox_changed(self, i):
        self.include_teryt = True if self.dockwidget.chk_teryt.isChecked() else False
        self.include_gus = True if self.dockwidget.chk_gus.isChecked() else False
        self.include_buildinfo = True if self.dockwidget.chk_buildinfo.isChecked() else False
        if self.dockwidget.chk_financial.isChecked():
            self.include_financial = True
            self.include_gus = True
            self.dockwidget.chk_gus.setChecked(True)
            self.dockwidget.chk_gus.setEnabled(False)
        else:
            self.dockwidget.chk_gus.setEnabled(True)
            self.include_financial = False

        if DEBUG_MODE:
            include_txt = str([self.include_teryt, self.include_gus, self.include_buildinfo, self.include_financial])
            QgsMessageLog().logMessage('Checkbox state: [TERYT, GUS, BUILDINFO, FINANCIAL]', 'AlgoMaps',
                                       level=Qgis.MessageLevel.Info)
            QgsMessageLog().logMessage(include_txt, 'AlgoMaps', level=Qgis.MessageLevel.Info)

    def _parse_statuses(self, status):

        # Split status into three separate strings (match, geocode, others)
        import re
        matches = re.findall(r'(<dopasowanie: [^>]+>)|(<geokodowanie: [^>]+>)|(<[^>]+>)',
                             status.strip())

        status_dop = None
        status_geo = None
        status_other = []

        for match in matches:
            if match[0]:
                status_dop = match[0]
            elif match[1]:
                status_geo = match[1]
            elif match[2]:
                status_other.append(match[2])

        # Concatenate all "other" matches into a single string
        status_other = ''.join(status_other) if status_other else None

        return status_dop, status_geo, status_other

    def file_batch_load_changed(self):
        if DEBUG_MODE:
            QgsMessageLog.logMessage('BATCH FILE PATH CHANGED', 'AlgoMaps', Qgis.MessageLevel.Info)

        # Check pandas import
        try:
            import pandas as pd
        except ModuleNotFoundError as e:
            self.iface.messageBar().pushMessage(self.tr(u'AlgoMaps'),
                                                self.tr(
                                                    u'Cannot import `pandas` module. Please install it - see README.md for instructions.'),
                                                level=Qgis.MessageLevel.Critical)
            return

        def identify_header(path, n=5, th=0.9):
            df1 = pd.read_csv(path, sep=None, header='infer', nrows=n, on_bad_lines='warn', engine='python',
                              escapechar='\\')
            df2 = pd.read_csv(path, sep=None, header=None, nrows=n, on_bad_lines='warn', engine='python',
                              escapechar='\\')
            sim = (df1.dtypes.values == df2.dtypes.values).mean()  # Boolean mask array mean
            return 'infer' if sim < th else None

        def get_file_line_count(path, header=None):
            with open(path, 'rb') as file:
                for count, _ in enumerate(file):
                    pass
            count = count if header else count+1
            return count

        try:
            csv_path = self.dockwidget.file_batch_load.filePath()

            self.dockwidget.tableWidget_batch.clear()
            self.dockwidget.tableWidget_batch.setColumnCount(0)
            self.dockwidget.tableWidget_batch.setRowCount(0)

            if not csv_path:  # Empty fileWidget path
                return

            # Read the first 5 rows (to examine the columns and set the DQ parameters)
            header_type = identify_header(csv_path)
            df = pd.read_csv(csv_path, sep=None, header=header_type, nrows=4, escapechar='\\', engine='python')

            # Add record count to UI
            line_count = get_file_line_count(csv_path, header_type)
            self.dockwidget.lbl_records.setText(f'Linii: {str(line_count)}')

            # Add columns and rows
            row_count, col_count = df.shape
            [self.dockwidget.tableWidget_batch.insertColumn(0) for _ in range(col_count)]
            [self.dockwidget.tableWidget_batch.insertRow(0) for _ in range(row_count+1)]  # One more for comboBoxes
            self.dockwidget.tableWidget_batch.setHorizontalHeaderLabels([str(col) for col in df.columns])

            # Fill the table with DataFrame values
            for i, row in enumerate(df.itertuples()):
                for k in range(col_count):
                    self.dockwidget.tableWidget_batch.setItem(i+1, k, QTableWidgetItem(str(row[k+1])))  # k=0 is index

            # Add column roles for DQ
            for k in range(col_count):
                new_role_combobox = QComboBox()
                role_item_list = ['PRZEPISZ', 'POMIN',
                                'ID_REKORDU',
                                'DANE_OGOLNE',
                                'KOD_POCZTOWY', 'MIEJSCOWOSC', 'ULICA_NUMER_DOMU_I_MIESZKANIA', 'ULICA', 'NUMER_DOMU',
                                'NUMER_MIESZKANIA', 'NUMER_DOMU_I_MIESZKANIA', 'WOJEWODZTWO', 'POWIAT', 'GMINA'
                                ]
                new_role_combobox.insertItems(0, role_item_list)
                new_role_combobox.insertSeparator(4)
                new_role_combobox.insertSeparator(3)
                new_role_combobox.insertSeparator(2)
                self.batch_combo_widgets.append(new_role_combobox)
                self.dockwidget.tableWidget_batch.setCellWidget(0, k, new_role_combobox)

            # Show the table
            self.dockwidget.tableWidget_batch.setVisible(True)
            self.dockwidget.lbl_records.setVisible(True)
            self.dockwidget.group_batch.setVisible(True)

        except Exception as e:
            raise
            # QgsMessageLog.logMessage(str(e), 'AlgoMaps', Qgis.MessageLevel.Warning)
            # pass





