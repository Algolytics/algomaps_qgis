# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AlgoMapsPlugin
                                 A QGIS plugin
 Plugin Algolytics do standaryzacji danych adresowych i geokodowania
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-09-05
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Algolytics Technologies
        email                : info@algolytics.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import requests
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis._core import QgsRectangle, QgsPointXY, QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsField, \
    QgsVectorLayer, QgsFeature, QgsGeometry

from qgis.core import (
    Qgis,
    QgsMessageLog,
    QgsProject,
)

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .algomaps_qgis_dockwidget import AlgoMapsPluginDockWidget
import os.path

import json

CONFIG_PATH = 'dq_config.json'

class AlgoMapsPlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.canvas = self.iface.mapCanvas()

        # Initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        self.config_path = os.path.join(self.plugin_dir, CONFIG_PATH)

        # Initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AlgoMapsPlugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&AlgoMaps')
        
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'AlgoMapsPlugin')
        self.toolbar.setObjectName(u'AlgoMapsPlugin')

        self.pluginIsActive = False
        self.dockwidget = None
        self.qproj = None

        # Read config file
        try:

            with open(self.config_path) as f:
                conf = json.load(f)

            self.dq_user = conf.get('dq_user')
            self.dq_token = conf.get('dq_token')
            self.api_key = conf.get('api_key')

        except Exception as e:
            QgsMessageLog.logMessage('Cannot read config file', tag='AlgoMaps', level=Qgis.MessageLevel.Critical)
            QgsMessageLog.logMessage(repr(e), tag='AlgoMaps', level=Qgis.MessageLevel.Critical)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AlgoMapsPlugin', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/algomaps_qgis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'AlgoMaps - standaryzacja i geokodowanie adresów'),
            callback=self.run,
            parent=self.iface.mainWindow())
        # # will be set False in run()
        # self.first_start = True
        self.qproj = QgsProject.instance()

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING AlgoMapsPlugin"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&AlgoMaps'),
                action)
            self.iface.removeToolBarIcon(action)
        # Remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget is None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = AlgoMapsPluginDockWidget()

                # Fill the `config.json` values into UI
                self.populate_dq_api_settings_ui()

                # Connect the buttons
                self.dockwidget.btn_settings_save.clicked.connect(self.save_settings)
                self.dockwidget.btn_settings_reset.clicked.connect(self.reset_settings)

                self.dockwidget.btn_geocode_general.clicked.connect(self.clicked_geocode_general)
                self.dockwidget.btn_geocode_details.clicked.connect(self.clicked_geocode_details)

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()



    def populate_dq_api_settings_ui(self):
        self.dockwidget.txt_dq_user.setText(self.dq_user)
        self.dockwidget.txt_dq_token.setText(self.dq_token)
        self.dockwidget.txt_api_key.setText(self.api_key)

    def populate_checkbox_settings_ui(self):
        #TODO
        pass

    def reset_settings(self):
        # Set previous DQ/API data
        self.populate_dq_api_settings_ui()

        # Set default checkbox values
        self.populate_checkbox_settings_ui()  # TODO

        QgsMessageLog.logMessage("Reset ustawień.", tag='AlgoMaps', level=Qgis.MessageLevel.Info)

    def save_settings(self):
        try:
            # Save new DQ/API data
            new_settings = {
                "dq_user": self.dockwidget.txt_dq_user.text(),
                "dq_token": self.dockwidget.txt_dq_token.text(),
                "api_key": self.dockwidget.txt_api_key.text(),
            }

            with open(self.config_path, 'w') as f:
                json.dump(new_settings, f)

            self.dq_user = new_settings['dq_user']
            self.dq_token = new_settings['dq_token']
            self.api_key = new_settings['api_key']

            # Save the checkbox values
            # TODO

            QgsMessageLog.logMessage("Zapisano ustawienia", tag='AlgoMaps', level=Qgis.MessageLevel.Success)

        except:
            QgsMessageLog.logMessage("Zapis ustawień nie powiódł się", tag='AlgoMaps', level=Qgis.MessageLevel.Warning)

    def clicked_geocode_general(self):
        QgsMessageLog.logMessage("Geokoduj (jedno pole adresowe)", tag='AlgoMaps', level=Qgis.MessageLevel.Info)
        dane_ogolne = self.dockwidget.txt_generaldata.text()

        # API request
        req_data = {
            "generalData": dane_ogolne
        }
        result_json = self.send_single_algomaps_request(req_data)
        if result_json is None:
            return

        self.dockwidget.txt_outputstand.setText(json.dumps(result_json, indent=2, ensure_ascii=False).encode('utf8').decode())

        if 'latitude' in result_json and 'longitude' in result_json:
            self.add_response_to_map(result_json, dane_ogolne)
        else:
            QgsMessageLog.logMessage('Brak geokodowania dla podanego adresu', 'AlgoMaps')

    def clicked_geocode_details(self):
        QgsMessageLog.logMessage("Geokoduj (dane szczegółowe)", tag='AlgoMaps', level=Qgis.MessageLevel.Info)
        w = self.dockwidget.txt_voivodeship.text()
        p = self.dockwidget.txt_county.text()
        g = self.dockwidget.txt_commune.text()
        m = self.dockwidget.txt_city.text()
        k = self.dockwidget.txt_postal.text()
        u = self.dockwidget.txt_street.text()
        n = self.dockwidget.txt_houseno.text()
        l = self.dockwidget.txt_flatno.text()

        # API request
        req_data = {
            "voivodeshipName": w,
            "countyName": p,
            "communeName": g,
            "cityName": m,
            "postalCode": k,
            "streetName": u,
            "streetNumber": n,
            "apartmentNumber": l
        }

        result_json = self.send_single_algomaps_request(req_data)
        
        if result_json is None:  # Error
            return

        self.dockwidget.txt_outputstand.setText(json.dumps(result_json, indent=2, ensure_ascii=False).encode('utf8').decode())

        if 'latitude' in result_json and 'longitude' in result_json:
            input_text = f'{w}|{p}|{g}|{m}|{k}|{u}|{n}|{l}'
            self.add_response_to_map(result_json, input_text)
        else:
            QgsMessageLog.logMessage('Brak geokodowania dla podanego adresu', 'AlgoMaps')
    
    def send_single_algomaps_request(self, req_data, gus=False, teryt=False, buildings_info=False):
        input_json = {
            "inputRows": [req_data],
            "processParameters": {
                "activeModules": ["ADDRESSES"],
                "includeBuildingsInfo": buildings_info,
                "includeSymbolicNames": teryt,
                "includeDiagnosticInfo": True,
                "includeGeographicCoordinates": True,
                "includeGusZones": gus
            }
        }

        headers = {
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache',
            'Ocp-Apim-Subscription-Key': self.api_key
        }

        response = requests.post('https://api.algolytics.pl/dqo/api/v1/rows',
                                 json=input_json,
                                 headers=headers)
        if response.status_code == 200:
            return response.json()[0]
        else:
            QgsMessageLog.logMessage('Could not fetch the data from server, check the settings',
                                     tag = 'AlgoMaps',
                                     level=Qgis.MessageLevel.Critical)
            return None

    def add_response_to_map(self, result_json, input_data=None):
        lat = result_json.get('latitude')
        lon = result_json.get('longitude')
        voivodeship = result_json.get('voivodeshipName')
        county = result_json.get('countyName')
        commune = result_json.get('communeName')
        postal_code = result_json.get('postalCode')
        city_name = result_json.get('cityName')
        street_attr = result_json.get('streetAttribute')
        street_name = result_json.get('streetName')
        street_number = result_json.get('streetNumber')
        apart_number = result_json.get('apartmentNumber')
        status = result_json.get('statuses')

        import re
        status_groups = re.findall(r'(<.*>).*(<.*>)', status)[0]
        stat1, stat2 = None, None
        if len(status_groups) == 2:
            stat1 = status_groups[0]
            stat2 = status_groups[1]

        #
        layer_name = "AlgoMaps standaryzacja i geokodowanie"
        layer_find = QgsProject.instance().mapLayersByName(layer_name)
        if len(layer_find) == 0:
            # Create layer if not exists
            vl = QgsVectorLayer("Point?crs=epsg:4326", layer_name, "memory")
            self.qproj.addMapLayer(vl)

            pr = vl.dataProvider()
            if Qgis.versionInt() > 33800:
                from qgis.PyQt.QtCore import QMetaType
                field_string_type = QMetaType.QString
            else:
                from qgis.PyQt.QtCore import QVariant
                field_string_type = QVariant.String

            # TODO: różne pola dla różnych checkboxów
            pr.addAttributes([QgsField("inputData", field_string_type),
                              QgsField("voivodeshipName", field_string_type),
                              QgsField("countyName", field_string_type),
                              QgsField("communeName", field_string_type),
                              QgsField("postalCode", field_string_type),
                              QgsField("cityName", field_string_type),
                              QgsField("streetAttribute", field_string_type),
                              QgsField("streetName", field_string_type),
                              QgsField("streetNumber", field_string_type),
                              QgsField("apartmentNumber", field_string_type),
                              QgsField("status1", field_string_type),
                              QgsField("status2", field_string_type)])
        else:
            vl = layer_find[0]
            pr = vl.dataProvider()

        # Create feature
        f = QgsFeature()
        f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(lon, lat)))
        f.setAttributes([input_data,
                         voivodeship,
                         county,
                         commune,
                         postal_code,
                         city_name,
                         street_attr,
                         street_name,
                         street_number,
                         apart_number,
                         stat1,
                         stat2])
        pr.addFeature(f)
        vl.updateFields()
        vl.updateExtents()

        # Recenter the map
        self.recenter_at_xy(lon, lat)

    def recenter_at_xy(self, lon, lat, srs=4326):
        original_rect = QgsRectangle(QgsPointXY(lon, lat), QgsPointXY(lon, lat))
        source_crs = QgsCoordinateReferenceSystem(f"EPSG:{srs}")
        dest_crs = self.qproj.crs()

        transform_context = QgsProject.instance().transformContext()
        coordinate_transform = QgsCoordinateTransform(source_crs, dest_crs, transform_context)
        transformed_rect = coordinate_transform.transformBoundingBox(original_rect)

        self.canvas.setExtent(transformed_rect)
        self.canvas.refresh()
